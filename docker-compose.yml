version: '3.9'

networks:
  default:

#volumes:
#  postgres_data:
#  mongodb_data:
#  vue-client:
#  grafana_data:

services:

#  postgres:
#    image: postgres:latest # postgres:12
#    container_name: db_postgres
#    #hostname: db
#    restart: always
#    ports:
#      - 5432:5432
#    volumes:
#      - ./config/db/postgres.sql:/docker-entrypoint-initdb.d/script.sql
#      - ./config/db/postgres.conf:/etc/postgresql/postgresql.conf
#      - ./config/db/postgres:/var/lib/postgresql/data
#      - ./config/db/postgres:/var/lib/postgresql/data/pgdata
#      command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
#      #command: postgres -c 'config_file=etc/postgresql/postgresql.conf'
#    environment:
#      - POSTGRES_PASSWORD=postgres
#      - POSTGRES_USER=postgres
#      - POSTGRES_DB=postgres

#  mongo:
#    image: mongo:3
#    container_name: db_mongo
#    volumes:
#      - ./config/db/mongodb:/data/db

#  jaeger:
#    image: jaegertracing/all-in-one:latest
#    container_name: jaeger
#    hostname: jaeger
#    ports:
#      - 5775:5775/udp
#      - 6831:6831/udp
#      - 6832:6832/udp
#      - 5778:5778
#      - 16686:16686
#      - 14268:14268
#      - 9411:9411
#      - 4317:4317
#      - 4318:4318
#    environment:
#      - LOG_LEVEL=debug
#      - COLLECTOR_ZIPKIN_HTTP_PORT=9411
#    labels:
#      NAME: "jaeger-agent"
#    restart: always # on-failure

#  redis:
#    image: redis:latest
#    container_name: db_redis
#    hostname: redis
#    restart: always
#    ports:
#      - 6379:6379
#    command: redis-server --requirepass 123 --appendonly yes --save 20 1 --loglevel warning
#    volumes:
#      - /config/db/redis/:/data
#    # environment:
#    #   - REDIS_REPLICATION_MODE=master

  loki:
    image: grafana/loki:3.0.0
    container_name: loki
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"

  prometheus:
    image: prom/prometheus:v2.51.2
    container_name: prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus:/workspace
      # - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - --config.file=/workspace/prometheus.yml
      - --enable-feature=exemplar-storage
      #- '--config.file=/etc/prometheus/prometheus.yml'
    depends_on:
      - loki

  tempo:
    image: grafana/tempo:2.4.1
    container_name: tempo
    command: [ "--target=all", "--storage.trace.backend=local", "--storage.trace.local.path=/var/tempo", "--auth.enabled=false" ]
    ports:
      - "4317:4317"
      - "4318:4318"
    depends_on:
      - loki

  grafana:
    image: grafana/grafana:10.4.2
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./config/grafana/:/etc/grafana/provisioning/datasources
      - ./config/dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml
      - ./config/dashboards:/etc/grafana/dashboards
      #- ./config/grafana/:/var/lib/grafana
      #- ./config/grafana/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
    depends_on:
      - loki
      - prometheus

#  graylog:
#    image: graylog/graylog:3.3
#    container_name: graylog
#    environment:
#      - GRAYLOG_PASSWORD_SECRET=${GRAYLOG_PASSWORD}
#      - GRAYLOG_ROOT_PASSWORD_SHA2=${GRAYLOG_PASSWORD_SHA}
#      - GRAYLOG_HTTP_EXTERNAL_URI=http://127.0.0.1:9000/
#    depends_on:
#      - mongo
#    ports:
#      - 9000:9000 # Graylog web interface and REST API
#      - 1514:1514 # Syslog TCP
#      - 1514:1514/udp # Syslog UDP
#      - 12201:12201 # GELF TCP
#      - 12201:12201/udp # GELF UDP

  # nginx:
  #   image: nginx:1.22.1
  #   ports:
  #   - 8180:8080
  #   - 8181:80
  #   volumes:
  #   - ./nginx/status.conf:/etc/nginx/conf.d/status.conf
  #   - ./nginx/nginx.conf:/etc/nginx/nginx.conf
  #   - ./nginx/myapp.conf:/etc/nginx/conf.d/default.conf
  #   - ./test-access.log:/var/log/nginx/access.log

#  api:
#    build: .
#    build:
#      context: .
#    container_name: api
#    hostname: api
#    command: uvicorn app.main:app --host 0.0.0.0 --port 8000
#    # command: bash -c "alembic upgrade head && uvicorn main:app --host 0.0.0.0 --port 8000 --reload"
#    restart: always
#    volumes:
#      - .:/code
#      - ./banco.db:/app/banco.db
#    ports:
#      - 8000:8000
#    environment:
#      - SECRET_KEY=${SECRET_KEY?}
#      - POSTGRES_SERVER=db
#      - POSTGRES_PORT=${POSTGRES_PORT}
#      - POSTGRES_DB=${POSTGRES_DB}
#      - POSTGRES_USER=${POSTGRES_USER}
#      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
#    depends_on:
#      - db
#      - loki
#    env_file:
#      - .env
